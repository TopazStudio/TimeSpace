type User {
    #The id of the user
    id : ID!
    first_name : String
    second_name : String
    surname : String
    name_prefix : String
    status : Int!
    email : String
    tel : String

    created_at: DateTime
    updated_at: DateTime

    following: [User!] @hasMany
    followers: [User!] @hasMany
    pictures: [Picture!]! @hasMany
}

type UserSearchResults{
    took : Int
    totalHits : Int
    maxScore : Float
    hits : [User!]
}

type Organization {
    id: ID!
    name: String
    description: String
    created_at: DateTime
    updated_at: DateTime

    owner: User @belongsTo
    groups: [Group!] @hasMany
    pictures: [Picture!]! @hasMany
}

type OrganizationSearchResults{
    took : Int
    totalHits : Int
    maxScore : Float
    hits : [Organization!]
}

type Group {
    id: ID!
    name: String
    description: String
    group_type: String
    created_at: DateTime
    updated_at: DateTime

    owner: User @belongsTo
    organization: Organization @belongsTo
    group_members: [User!] @hasMany
    pictures: [Picture!]! @hasMany
}

type GroupSearchResults{
    took : Int
    totalHits : Int
    maxScore : Float
    hits : [Group!]
}

type Picture {
    id: ID!
    name: String
    type: String
    size: Int
    remote_location: String
    description: String
    created_at: DateTime
    updated_at: DateTime

    picturable_id: ID!
    picturable_type: String!
}

type LoginPayload{
    token: String!
    user: User!
}